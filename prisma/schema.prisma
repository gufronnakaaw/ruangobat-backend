generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AdminRole {
  admin
  superadmin
}

enum ProgramType {
  free
  paid
}

enum Gender {
  M
  F
}

enum QuestionType {
  text
  video
  image
}

enum SubscriptionType {
  videocourse
  apotekerclass
}

model Admin {
  id               Int              @id               @default(autoincrement())
  admin_id         String           @unique
  fullname         String         
  password         String
  role             AdminRole

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  @@map("admin")
}

model User {
  id               Int              @id               @default(autoincrement())
  user_id          String           @unique
  fullname         String         
  email            String           @unique
  phone_number     String           @unique
  university       String            
  gender           Gender
  password         String
  is_verified      Boolean?         @default(false)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  session          Session[]
  results          Result[]
  participants     Participant[]
  starts           Start[]
  socmedimg        SocialMediaImage[]
  chats            AiChat[]  

  userlimit       UserAiLimit?      

  @@map("user")
}

model Session {
  id               Int              @id               @default(autoincrement())
  session_id       String           @unique           @default(uuid())
  user_id          String           
  expired          DateTime
  os               String?
  browser          String?
  
  created_at       DateTime         @default(now())

  user             User             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  
  @@map("session")
}

model Program {
  id               Int              @id               @default(autoincrement())
  program_id       String           @unique
  title            String
  type             ProgramType
  price            Int?             @db.UnsignedInt
  is_active        Boolean          @default(true)
  qr_code          String?
  url_qr_code      String?          

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String

  participants     Participant[]
  details          ProgramDetail[]
  socmedimg        SocialMediaImage[]

  @@map("program")
}

model ProgramDetail {
  program_id       String
  test_id          String    

  program          Program          @relation(fields: [program_id], references: [program_id], onUpdate: NoAction, onDelete: Cascade)
  test             Test             @relation(fields: [test_id], references: [test_id])

  @@id([program_id, test_id])
  @@map("program_detail")
}

model Test {
  id               Int              @id               @default(autoincrement())
  test_id          String           @unique
  title            String
  description      String           @db.Text
  start            DateTime
  end              DateTime
  duration         Int              @db.UnsignedInt
  is_active        Boolean          @default(true)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String      

  questions        Question[]
  details          ProgramDetail[]
  starts           Start[] 
  results          Result[]     

  @@map("test")

}

model Question {
  id               Int              @id               @default(autoincrement())
  test_id          String
  number           Int              @db.UnsignedInt
  question_id      String           @unique
  text             String?          @db.Text
  url              String?          @db.VarChar(255)
  explanation      String           @db.Text
  type             QuestionType

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String    

  test             Test             @relation(fields: [test_id], references: [test_id])
  options          Option[]
  details          ResultDetail[]

  @@map("question")
}


model Option {
  id               Int              @id               @default(autoincrement())    
  question_id      String    
  option_id        String
  text             String           @db.Text
  is_correct       Boolean  

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String    

  question         Question         @relation(fields: [question_id], references: [question_id], onDelete: Cascade)

  @@map("option")
}

model Result {
  id               Int              @id               @default(autoincrement())    
  user_id          String
  test_id          String
  result_id        String           @unique
  total_correct    Int              @db.UnsignedInt
  total_incorrect  Int              @db.UnsignedInt
  score            Int              @db.UnsignedInt

  created_at       DateTime         @default(now())

  user             User             @relation(fields: [user_id], references: [user_id])
  test             Test             @relation(fields: [test_id], references: [test_id])
  details          ResultDetail[]

  @@map("result")
}

model ResultDetail {   
  result_id        String
  question_id      String
  number           Int              @db.UnsignedInt
  correct_option   String
  user_answer      String?
  is_correct       Boolean

  result           Result           @relation(fields: [result_id], references: [result_id], onUpdate: NoAction, onDelete: Cascade)
  questions        Question         @relation(fields: [question_id], references: [question_id])

  @@id([result_id, question_id])
  @@map("result_detail")
}

model Participant {
  program_id       String           
  user_id          String
  code             String?          @unique
  joined_at        DateTime?
  invited_at       DateTime?
  invited_by       String?
  is_approved      Boolean?

  user             User             @relation(fields: [user_id], references: [user_id])
  program          Program          @relation(fields: [program_id], references: [program_id])

  @@id([program_id, user_id])
  @@map("participant")
}


model Start {
  user_id          String
  test_id          String
  end_time         DateTime

  user             User             @relation(fields: [user_id], references: [user_id])
  test             Test             @relation(fields: [test_id], references: [test_id])

  @@id([user_id, test_id])
  @@map("start")
}

model SocialMediaImage {
  id               Int              @id               @default(autoincrement())    
  user_id          String
  program_id       String
  url              String

  created_at       DateTime         @default(now())

  user             User             @relation(fields: [user_id], references: [user_id])
  program          Program          @relation(fields: [program_id], references: [program_id])

  @@map("social_media_image")
}

model Feedback {
  id               Int              @id               @default(autoincrement())    
  user_id          String
  fullname         String
  rating           Int              @db.UnsignedTinyInt
  text             String           @db.Text
  created_at       DateTime         @default(now())

  @@map("feedback")
}

model Otp {
  id               Int              @id               @default(autoincrement())    
  otp_id           String           @unique         
  otp_code         String           
  user_id          String?
  used_at          DateTime?
  expired_at       DateTime

  created_at       DateTime         @default(now())

  @@map("otp")
}

model Mentor {
  id               Int              @id               @default(autoincrement())    
  mentor_id        String           @unique 
  fullname         String
  nickname         String
  mentor_title     String
  description      String           @db.Text
  img_url          String
  is_show          Boolean          @default(true)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String    

  class_mentor     ClassMentor[]

  @@map("mentor")    
}

enum ThumbnailType {
  video
  image
}

enum SubjectType {
  preparation
  private
}

model Subject {
  id               Int              @id               @default(autoincrement())
  subject_id       String           @unique 
  title            String
  slug             String           @unique 
  description      String           @db.Text
  thumbnail_url    String?
  thumbnail_type   ThumbnailType?
  price            Int?             @db.UnsignedInt
  link_order       String?
  subject_type     SubjectType
  is_active        Boolean          @default(true)
  
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String  

  subject_part     SubjectPart[] 

  @@map("subject")
}

model SubjectPart {
  id               Int              @id               @default(autoincrement())
  subject_part_id  String           @unique 
  subject_id       String 
  description      String           @db.Text
  price            Int              @db.UnsignedInt
  link_order       String

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String 

  subject          Subject          @relation(fields: [subject_id], references: [subject_id], onDelete: Cascade)

  @@map("subject_part")
}

model Thesis {
  id               Int              @id               @default(autoincrement())
  thesis_id        String           @unique 
  title            String
  slug             String           @unique 
  description      String           @db.Text
  thumbnail_url    String?
  thumbnail_type   ThumbnailType?
  price            Int              @db.UnsignedInt
  link_order       String
  is_active        Boolean          @default(true)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String 

  @@map("thesis")
}

model Research {
  id               Int              @id               @default(autoincrement())
  research_id      String           @unique 
  title            String
  slug             String           @unique 
  description      String           @db.Text
  thumbnail_url    String?
  thumbnail_type   ThumbnailType?
  price            Int              @db.UnsignedInt
  link_order       String
  is_active        Boolean          @default(true)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String 

  @@map("research")
}

model University {
  id               Int              @id               @default(autoincrement())
  university_id    String           @unique
  name             String
  slug             String           @unique
  description      String?          @db.Text
  img_url          String
  is_active        Boolean          @default(true)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String
  
  pa               PharmacistAdmission[]

  @@map("university")
}

model PharmacistAdmission {
  id               Int              @id               @default(autoincrement())
  pa_id            String           @unique
  university_id    String
  title            String
  slug             String
  description      String           @db.Text
  thumbnail_url    String?
  thumbnail_type   ThumbnailType?
  price            Int              @db.UnsignedInt
  link_order       String
  is_active        Boolean          @default(true)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String 

  university       University       @relation(fields: [university_id], references: [university_id], onDelete: Cascade)

  @@map("pharmacist_admission")
}

enum ClassMentorType {
  preparation
  private
  thesis
  research
  pharmacist_admission
}

model ClassMentor {
  id               Int              @id               @default(autoincrement())
  class_mentor_id  String           @unique
  type             ClassMentorType
  mentor_id        String

  mentor           Mentor           @relation(fields: [mentor_id], references: [mentor_id], onDelete: Cascade)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String

  @@map("class_mentor")
}

enum AiPlanType {
  free
  paid
}

model AiProvider {
  id               Int              @id               @default(autoincrement())
  provider_id      String           @unique           @default(uuid())
  name             String
  model            String
  api_key          String
  api_url          String
  type             AiPlanType
  is_active        Boolean          @default(true)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  created_by       String
  updated_by       String

  @@map("ai_provider")
}

model AiContext {
  id               Int              @id               @default(autoincrement())
  context_id       String           @unique           @default(uuid())
  title            String
  content          String           @db.Text
  type             String
  file_url         String?
  is_active        Boolean          @default(true)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  created_by       String
  updated_by       String

  @@index([title])
  @@map("ai_context")
}

model AiChat {
  id               Int              @id               @default(autoincrement())
  chat_id          String           @unique           @default(uuid())
  user_id          String
  source           String
  model            String
  question         String?          @db.Text
  answer           String?          @db.Text
  prompt_tokens    Int?             @db.UnsignedInt
  completion_tokens Int?            @db.UnsignedInt
  total_tokens     Int?             @db.UnsignedInt
  total_cost       Decimal?         @db.Decimal(38, 20)                      

  created_at       DateTime         @default(now())

  user             User             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  image            AiChatImage[]

  @@index([user_id, created_at])
  @@map("ai_chat")
}

model AiChatImage {
  id               Int              @id               @default(autoincrement())
  chat_id          String
  image_id         String           @unique           @default(uuid())
  img_url          String   

  created_at       DateTime         @default(now())

  chat             AiChat           @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)

  @@index([chat_id])
  @@map("ai_chat_image")
}

model AiLimit {
  id               Int              @id               @default(autoincrement())
  limit_id         String           @unique           @default(uuid())
  type             AiPlanType
  total            Int              @db.UnsignedInt

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  created_by       String
  updated_by       String

  @@map("ai_limit")
}

model UserAiLimit {
  id               Int              @id @default(autoincrement())
  user_id          String           @unique
  total            Int              @db.UnsignedInt
  expired_at       DateTime?
  
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  created_by       String
  updated_by       String

  user             User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("user_ai_limit")
}

model SubscriptionPackage {
  id               Int              @id               @default(autoincrement())
  package_id       String           @unique           @default(uuid())
  name             String
  price            Int              @db.UnsignedInt
  duration         Int              @db.UnsignedInt
  type             SubscriptionType
  link_order       String
  is_active        Boolean          @default(true)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String 

  benefit          SubscriptionBenefit[]

  @@map("subscription_package")
}

model SubscriptionBenefit {
  id               Int              @id               @default(autoincrement())
  benefit_id       String           @unique           @default(uuid())
  package_id       String
  description      String

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String 

  package          SubscriptionPackage @relation(fields: [package_id], references: [package_id], onDelete: Cascade)

  @@map("subscription_benefit")
}