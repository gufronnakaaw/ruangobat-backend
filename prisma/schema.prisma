generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AdminRole {
  admin
  superadmin
}

enum ProgramType {
  free
  paid
}

enum Gender {
  M
  F
}

enum QuestionType {
  text
  video
  image
}

enum SubscriptionType {
  videocourse
  apotekerclass
  videoukmppai
}

enum ContentType {
  video
  test
}

enum TestType {
  pre
  post
}

enum CardType {
  image
  text
  document
}

enum Variant {
  quiz
  tryout
}

enum VariantResult {
  quiz
  tryout
  pre
  post
}

enum LogLoginType {
  admin
  user
}

enum TestimonialType {
  videocourse 
  apotekerclass 
  videoukmppai 
  theses 
  research 
  tryout 
  book 
  ai
  general
}

enum PromptType {
  INSTRUCTION
  CONTEXT
  ANSWER_FORMAT
}

enum ClassMentorType {
  preparation
  private
  thesis
  research
  pharmacist_admission
}

enum ThumbnailType {
  video
  image
}

enum SubjectType {
  preparation
  private
}

enum AiPlanType {
  free
  paid
}

enum AccessType {
  videocourse 
  apotekerclass
  videoukmppai
  book
  ai
}

enum AccessStatus {
  active 
  scheduled 
  expired 
  revoked
}

enum OrderStatus {
  pending
  paid
  failed
  expired
  cancelled
  replaced
}

enum OrderItemType {
  videocourse 
  apotekerclass 
  videoukmppai 
  theses 
  research 
  tryout 
  book 
  ai
}

enum NormalizedMethod {
  va
  qris
  ewallet
  manual
}

enum TransactionStatus {
  pending
  success
  failed
  expired
}

model Admin {
  id               Int              @id               @default(autoincrement())
  admin_id         String           @unique
  fullname         String         
  password         String
  role             AdminRole

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  loglogin         LogLogin[]

  @@map("admin")
}

model User {
  id               Int              @id               @default(autoincrement())
  user_id          String           @unique
  fullname         String         
  email            String           @unique
  phone_number     String           @unique
  university       String            
  gender           Gender
  password         String
  is_verified      Boolean?         @default(false)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  session          Session[]
  results          Result[]
  participants     Participant[]
  starts           Start[]
  socmedimg        SocialMediaImage[]
  chats            AiChat[]  
  progress         UserContentProgress[]
  loglogin         LogLogin[]
  testimonial      Testimonial[]

  userlimit        UserAiLimit?

  order            Order[]
  access           Access[] 
  accestest        AccessTest[]     

  @@index([fullname, email, phone_number, created_at])
  @@map("user")
}

model Session {
  id               Int              @id               @default(autoincrement())
  session_id       String           @unique           @default(uuid())
  user_id          String           
  expired          DateTime
  os               String?
  browser          String?
  
  created_at       DateTime         @default(now())

  user             User             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  
  @@map("session")
}

model Program {
  id               Int              @id               @default(autoincrement())
  program_id       String           @unique
  title            String
  type             ProgramType
  price            Int?             @db.UnsignedInt
  is_active        Boolean          @default(true)
  qr_code          String?
  url_qr_code      String?          

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String

  participants     Participant[]
  details          ProgramDetail[]
  socmedimg        SocialMediaImage[]

  @@map("program")
}

model ProgramDetail {
  program_id       String
  test_id          String    

  program          Program          @relation(fields: [program_id], references: [program_id], onUpdate: NoAction, onDelete: Cascade)
  test             Test             @relation(fields: [test_id], references: [test_id])

  @@id([program_id, test_id])
  @@map("program_detail")
}

model Test {
  id               Int              @id               @default(autoincrement())
  test_id          String           @unique
  title            String
  description      String           @db.Text
  start            DateTime
  end              DateTime
  duration         Int              @db.UnsignedInt
  is_active        Boolean          @default(true)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String      

  questions        Question[]
  details          ProgramDetail[]
  starts           Start[] 
  results          Result[]     

  @@map("test")

}

model Question {
  id               Int              @id               @default(autoincrement())
  test_id          String
  number           Int              @db.UnsignedInt
  question_id      String           @unique
  text             String?          @db.Text
  url              String?          @db.VarChar(255)
  explanation      String           @db.Text
  type             QuestionType

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String    

  test             Test             @relation(fields: [test_id], references: [test_id])
  options          Option[]
  details          ResultDetail[]

  @@map("question")
}


model Option {
  id               Int              @id               @default(autoincrement())    
  question_id      String    
  option_id        String
  text             String           @db.Text
  is_correct       Boolean  

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String    

  question         Question         @relation(fields: [question_id], references: [question_id], onDelete: Cascade)

  @@map("option")
}

model Result {
  id               Int              @id               @default(autoincrement())    
  user_id          String
  test_id          String
  result_id        String           @unique
  total_correct    Int              @db.UnsignedInt
  total_incorrect  Int              @db.UnsignedInt
  score            Int              @db.UnsignedInt

  created_at       DateTime         @default(now())

  user             User             @relation(fields: [user_id], references: [user_id])
  test             Test             @relation(fields: [test_id], references: [test_id])
  details          ResultDetail[]

  @@map("result")
}

model ResultDetail {   
  result_id        String
  question_id      String
  number           Int              @db.UnsignedInt
  correct_option   String
  user_answer      String?
  is_correct       Boolean

  result           Result           @relation(fields: [result_id], references: [result_id], onUpdate: NoAction, onDelete: Cascade)
  questions        Question         @relation(fields: [question_id], references: [question_id])

  @@id([result_id, question_id])
  @@map("result_detail")
}

model Participant {
  program_id       String           
  user_id          String
  code             String?          @unique
  joined_at        DateTime?
  invited_at       DateTime?
  invited_by       String?
  is_approved      Boolean?

  user             User             @relation(fields: [user_id], references: [user_id])
  program          Program          @relation(fields: [program_id], references: [program_id])

  @@id([program_id, user_id])
  @@map("participant")
}


model Start {
  user_id          String
  test_id          String
  end_time         DateTime

  user             User             @relation(fields: [user_id], references: [user_id])
  test             Test             @relation(fields: [test_id], references: [test_id])

  @@id([user_id, test_id])
  @@map("start")
}

model SocialMediaImage {
  id               Int              @id               @default(autoincrement())    
  user_id          String
  program_id       String
  url              String

  created_at       DateTime         @default(now())

  user             User             @relation(fields: [user_id], references: [user_id])
  program          Program          @relation(fields: [program_id], references: [program_id])

  @@map("social_media_image")
}

model Feedback {
  id               Int              @id               @default(autoincrement())    
  user_id          String
  fullname         String
  rating           Int              @db.UnsignedTinyInt
  text             String           @db.Text
  created_at       DateTime         @default(now())

  @@map("feedback")
}

model Otp {
  id               Int              @id               @default(autoincrement())    
  otp_id           String           @unique         
  otp_code         String           
  user_id          String?
  used_at          DateTime?
  expired_at       DateTime

  created_at       DateTime         @default(now())

  @@map("otp")
}

model Mentor {
  id               Int              @id               @default(autoincrement())    
  mentor_id        String           @unique 
  fullname         String
  nickname         String
  mentor_title     String
  description      String           @db.Text
  img_url          String
  is_show          Boolean          @default(true)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String    

  class_mentor     ClassMentor[]

  @@map("mentor")    
}

model Subject {
  id               Int              @id               @default(autoincrement())
  subject_id       String           @unique 
  title            String
  slug             String           @unique 
  description      String           @db.Text
  thumbnail_url    String?
  thumbnail_type   ThumbnailType?
  price            Int?             @db.UnsignedInt
  link_order       String?
  subject_type     SubjectType
  is_active        Boolean          @default(true)
  
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String  

  subject_part     SubjectPart[] 

  @@map("subject")
}

model SubjectPart {
  id               Int              @id               @default(autoincrement())
  subject_part_id  String           @unique 
  subject_id       String 
  description      String           @db.Text
  price            Int              @db.UnsignedInt
  link_order       String

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String 

  subject          Subject          @relation(fields: [subject_id], references: [subject_id], onDelete: Cascade)

  @@map("subject_part")
}

model Thesis {
  id               Int              @id               @default(autoincrement())
  thesis_id        String           @unique 
  title            String
  slug             String           @unique 
  description      String           @db.Text
  thumbnail_url    String?
  thumbnail_type   ThumbnailType?
  price            Int              @db.UnsignedInt
  discount_amount  Int?             @db.UnsignedInt
  link_order       String
  is_active        Boolean          @default(true)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String 

  @@map("thesis")
}

model Research {
  id               Int              @id               @default(autoincrement())
  research_id      String           @unique 
  title            String
  slug             String           @unique 
  description      String           @db.Text
  thumbnail_url    String?
  thumbnail_type   ThumbnailType?
  price            Int              @db.UnsignedInt
  discount_amount  Int?             @db.UnsignedInt
  link_order       String
  is_active        Boolean          @default(true)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String 

  @@map("research")
}

model ClassMentor {
  id               Int              @id               @default(autoincrement())
  class_mentor_id  String           @unique
  type             ClassMentorType
  mentor_id        String

  mentor           Mentor           @relation(fields: [mentor_id], references: [mentor_id], onDelete: Cascade)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String

  @@map("class_mentor")
}

model AiProvider {
  id               Int              @id               @default(autoincrement())
  provider_id      String           @unique           @default(uuid())
  name             String
  model            String
  api_key          String
  api_url          String
  type             AiPlanType
  is_active        Boolean          @default(true)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  created_by       String
  updated_by       String

  @@map("ai_provider")
}

model AiContext {
  id               Int              @id               @default(autoincrement())
  context_id       String           @unique           @default(uuid())
  title            String
  content          String           @db.Text
  type             String
  file_url         String?
  is_active        Boolean          @default(true)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  created_by       String
  updated_by       String

  @@index([title])
  @@map("ai_context")
}

model AiChat {
  id               Int              @id               @default(autoincrement())
  chat_id          String           @unique           @default(uuid())
  user_id          String
  source           String
  model            String
  question         String?          @db.Text
  answer           String?          @db.Text
  prompt_tokens    Int?             @db.UnsignedInt
  completion_tokens Int?            @db.UnsignedInt
  total_tokens     Int?             @db.UnsignedInt
  total_cost       Decimal?         @db.Decimal(38, 20)                      

  created_at       DateTime         @default(now())

  user             User             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  image            AiChatImage[]

  @@index([user_id, created_at])
  @@map("ai_chat")
}

model AiChatImage {
  id               Int              @id               @default(autoincrement())
  chat_id          String
  image_id         String           @unique           @default(uuid())
  img_url          String           @db.Text

  created_at       DateTime         @default(now())

  chat             AiChat           @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)

  @@index([chat_id])
  @@map("ai_chat_image")
}

model AiLimit {
  id               Int              @id               @default(autoincrement())
  limit_id         String           @unique           @default(uuid())
  type             AiPlanType
  total            Int              @db.UnsignedInt

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  created_by       String
  updated_by       String

  @@map("ai_limit")
}

model UserAiLimit {
  id               Int              @id @default(autoincrement())
  user_id          String           @unique
  total            Int              @db.UnsignedInt
  expired_at       DateTime?
  
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  created_by       String
  updated_by       String

  user             User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("user_ai_limit")
}

model SubscriptionPackage {
  id               Int              @id               @default(autoincrement())
  package_id       String           @unique           @default(uuid())
  name             String
  price            Int              @db.UnsignedInt
  discount_amount  Int?             @db.UnsignedInt
  duration         Int              @db.UnsignedInt
  type             SubscriptionType
  link_order       String
  is_active        Boolean          @default(true)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String 

  benefit          SubscriptionBenefit[]

  @@map("subscription_package")
}

model SubscriptionBenefit {
  id               Int              @id               @default(autoincrement())
  benefit_id       String           @unique           @default(uuid())
  package_id       String
  description      String

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String 

  package          SubscriptionPackage @relation(fields: [package_id], references: [package_id], onDelete: Cascade)

  @@map("subscription_benefit")
}

model Category {
  id               Int              @id               @default(autoincrement())
  category_id      String           @unique           @default(uuid())
  slug             String           
  name             String
  img_url          String           @db.Text
  img_key          String
  type             SubscriptionType
  is_active        Boolean          @default(true)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  
  created_by       String
  updated_by       String

  subcategory      SubCategory[]
  course           Course[]   
  card             Card[]
  assessment       Assessment[]

  @@index([slug, name])
  @@unique([type, slug])
  @@map("category")
}

model SubCategory {
  id               Int              @id               @default(autoincrement())
  sub_category_id  String           @unique           @default(uuid())
  category_id      String
  name             String           
  slug             String           
  type             SubscriptionType
  img_url          String           @db.Text  
  img_key          String
  is_active        Boolean          @default(true)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  
  created_by       String
  updated_by       String

  course           Course[]
  card             Card[]
  assessment       Assessment[]
  category         Category         @relation(fields: [category_id], references: [category_id], onDelete: Cascade)

  @@index([slug, name])
  @@unique([type, slug])
  @@map("sub_category")
}

model Course {
  id                Int             @id           @default(autoincrement())
  course_id         String          @unique       @default(uuid())
  category_id       String?    
  sub_category_id   String?   
  title             String
  slug              String          
  preview_url       String?         @db.Text
  thumbnail_url     String
  thumbnail_key     String
  description       String          @db.Text
  is_active         Boolean         @default(true)
  type              SubscriptionType

  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  
  created_by        String
  updated_by        String

  category          Category?       @relation(fields: [category_id], references: [category_id], onDelete: Cascade)
  sub_category      SubCategory?    @relation(fields: [sub_category_id], references: [sub_category_id], onDelete: Cascade)
  segment           Segment[]    

  @@index([slug, category_id, sub_category_id, title])
  @@unique([type, slug])
  @@map("course")   
}

model Segment {
  id                Int             @id           @default(autoincrement())
  segment_id        String          @unique       @default(uuid())
  course_id         String
  title             String
  number            Int             @db.UnsignedInt
  is_active         Boolean         @default(true)
  
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  
  created_by        String
  updated_by        String

  course            Course          @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  content           Content[]

  @@index([course_id, segment_id])
  @@unique([course_id, number])
  @@map("segment")
}

model Content {
  id                Int             @id           @default(autoincrement())
  content_id        String          @unique       @default(uuid())
  segment_id        String
  number            Int             @db.UnsignedInt
  title             String
  video_url         String?         @db.Text
  video_note_url    String?         @db.Text
  video_note        String?         @db.Text
  duration          String?          
  content_type      ContentType
  test_type         TestType?
  is_active         Boolean         @default(true)

  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  
  created_by        String
  updated_by        String

  segment           Segment         @relation(fields: [segment_id], references: [segment_id], onDelete: Cascade)
  progress          UserContentProgress[]
  question          AssessmentQuestion[]
  result            AssessmentResult[]


  @@index([segment_id, content_id])
  @@unique([content_id, number])
  @@map("content")
}

model UserContentProgress {
  id                Int             @id           @default(autoincrement())
  progress_id       String          @unique       @default(uuid())
  content_id        String
  user_id           String
  progress_type     ContentType
  
  user              User            @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  content           Content         @relation(fields: [content_id], references: [content_id], onDelete: Cascade)

  @@index([content_id, user_id])
  @@map("user_content_progress")
}

model Card {
  id                Int             @id           @default(autoincrement())
  card_id           String          @unique       @default(uuid())
  category_id       String?    
  sub_category_id   String?
  type              CardType
  text              String?         @db.Text
  url               String?         @db.Text  
  key               String?         @db.Text 
  is_active         Boolean         @default(true)

  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  
  created_by        String
  updated_by        String

  category          Category?       @relation(fields: [category_id], references: [category_id], onDelete: Cascade)
  sub_category      SubCategory?    @relation(fields: [sub_category_id], references: [sub_category_id], onDelete: Cascade)

  @@index([category_id, sub_category_id, type])
  @@map("card")
}

model University {
  id               Int              @id               @default(autoincrement())
  univ_id          String           @unique
  title            String
  slug             String           @unique
  description      String?          @db.Text
  thumbnail_url    String
  thumbnail_key    String
  is_active        Boolean          @default(true)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String         
  updated_by       String
  
  univdetail       UniversityDetail[]
  accesstest       AccessTest[]

  @@map("university")
}

model UniversityDetail {
  id               Int              @id               @default(autoincrement())
  univd_id         String           @unique
  univ_id          String
  ass_id           String

  university       University       @relation(fields: [univ_id], references: [univ_id], onDelete: Cascade)
  assessment       Assessment       @relation(fields: [ass_id], references: [ass_id], onDelete: Cascade)

  @@map("university_detail")
}

model Assessment {
  id               Int              @id               @default(autoincrement())
  ass_id           String           @unique
  category_id      String?    
  sub_category_id  String?
  title            String
  description      String?          @db.Text
  ass_type         SubscriptionType
  variant          Variant?
  is_active        Boolean          @default(true)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String
  updated_by       String

  univdetail       UniversityDetail[]
  question         AssessmentQuestion[]
  result           AssessmentResult[]
  category         Category?       @relation(fields: [category_id], references: [category_id], onDelete: Cascade)
  sub_category     SubCategory?    @relation(fields: [sub_category_id], references: [sub_category_id], onDelete: Cascade)

  @@unique([title, ass_type])
  @@map("assessment")
}

model AssessmentQuestion {
  id               Int              @id               @default(autoincrement())
  assq_id          String           @unique
  ass_id           String?
  content_id       String?
  number           Int              @db.UnsignedInt
  text             String           @db.Text
  url              String?          @db.Text
  type             QuestionType
  explanation      String?          @db.Text

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String
  updated_by       String

  assessment       Assessment?      @relation(fields: [ass_id], references: [ass_id], onDelete: Cascade)
  content          Content?         @relation(fields: [content_id], references: [content_id], onDelete: Cascade)
  option           AssessmentOption[]
  resultdetail     AssessmentResultDetail[]

  @@map("assessment_question")
}


model AssessmentOption {
  id               Int              @id               @default(autoincrement())
  asso_id          String           @unique
  assq_id          String
  text             String           @db.Text
  is_correct       Boolean

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  created_by       String
  updated_by       String

  question         AssessmentQuestion @relation(fields: [assq_id], references: [assq_id], onDelete: Cascade)

  @@map("assessment_option")
}

model AssessmentResult {
  id               Int              @id               @default(autoincrement())
  assr_id          String           @unique
  ass_id           String?
  content_id       String?
  user_id          String
  total_correct    Int              @db.UnsignedInt
  total_incorrect  Int              @db.UnsignedInt
  score            Int              @db.UnsignedInt
  variant          VariantResult?           

  created_at       DateTime         @default(now())

  assessment       Assessment?      @relation(fields: [ass_id], references: [ass_id], onDelete: Cascade)
  content          Content?         @relation(fields: [content_id], references: [content_id], onDelete: Cascade)
  resultdetail     AssessmentResultDetail[]

  @@map("assessment_result")
}

model AssessmentResultDetail {
  id               Int              @id               @default(autoincrement())
  assrd_id         String           @unique
  assr_id          String
  assq_id          String
  number           Int              @db.UnsignedInt
  correct_option   String
  user_answer      String?
  is_correct       Boolean

  created_at       DateTime         @default(now())

  result           AssessmentResult  @relation(fields: [assr_id], references: [assr_id], onDelete: Cascade)
  question         AssessmentQuestion @relation(fields: [assq_id], references: [assq_id], onDelete: Cascade)

  @@map("assessment_result_detail")
}

model LogLogin {
  id                String           @id @default(uuid())
  user_id           String?
  admin_id          String?
  timestamp         DateTime         @default(now())
  ip_address        String?
  user_agent        String?          @db.Text
  os                String?
  type              LogLoginType

  user              User?             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  admin             Admin?            @relation(fields: [admin_id], references: [admin_id], onDelete: Cascade)

  @@index([timestamp])
  @@map("log_login")
}

model Testimonial {
  id                Int              @id               @default(autoincrement())
  testimonial_id    String           @unique           @default(uuid())
  user_id           String?
  content           String?          @db.Text
  img_url           String?          @db.Text
  is_active         Boolean          @default(true)
  type              TestimonialType

  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt

  user              User?            @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("testimonial")
}

model Prompt {
  id                Int              @id               @default(autoincrement())
  prompt_id         String           @unique           @default(uuid())
  type              PromptType       @unique
  content           String           @db.Text
  is_active         Boolean          @default(true)

  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt

  created_by        String
  updated_by        String

  @@map("prompt")
}

model Access {
  id                Int              @id               @default(autoincrement())
  access_id         String           @unique           @default(uuid())
  user_id           String
  order_id          String
  type              AccessType
  duration          Int              @db.UnsignedInt
  is_active         Boolean          
  status            AccessStatus
  extended_from     String?
  started_at        DateTime
  expired_at        DateTime
  update_reason     String?          @db.Text
  user_timezone     String           @default("Asia/Jakarta")

  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  
  created_by        String
  updated_by        String

  revokelog         AccessRevokeLog[]
  accesstest        AccessTest[]

  user              User             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  order             Order            @relation(fields: [order_id], references: [order_id], onDelete: Cascade)

  @@map("access")
}

model AccessRevokeLog {
  id                Int              @id               @default(autoincrement())
  revoke_id         String           @unique           @default(uuid())
  access_id         String
  reason            String           @db.Text
  created_at        DateTime         @default(now())
  created_by        String

  access            Access           @relation(fields: [access_id], references: [access_id], onDelete: Cascade)

  @@map("access_revoke_log")
}

model AccessTest {
  id                Int              @id               @default(autoincrement())
  access_test_id    String           @unique           @default(uuid())
  access_id         String
  user_id           String
  univ_id           String
  granted_at        DateTime         @default(now())
  granted_by        String?

  updated_at        DateTime         @updatedAt
  updated_by        String?

  access            Access           @relation(fields: [access_id], references: [access_id], onDelete: Cascade)
  user              User             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  university        University       @relation(fields: [univ_id], references: [univ_id], onDelete: Cascade)

  @@index([access_id, user_id, univ_id])
  @@map("access_test")
}

model Order {
  id                Int              @id               @default(autoincrement())
  order_id          String           @unique           
  invoice_number    String           @unique
  idempotency_key   String?          @unique
  user_id           String
  total_amount      Int              @db.UnsignedInt
  final_amount      Int              @db.UnsignedInt
  paid_amount       Int?             @db.UnsignedInt
  discount_amount   Int?             @db.UnsignedInt
  discount_code     String?
  status            OrderStatus      
  
  paid_at           DateTime?
  expired_at        DateTime?
  updated_at        DateTime         @updatedAt
  created_at        DateTime         @default(now())
  
  created_by        String?
  updated_by        String?

  user              User             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  items             OrderItem[]
  transactions      Transaction[]
  access            Access[]

  @@map("order")
}

model OrderItem {
  id                Int              @id               @default(autoincrement())
  item_id           String           @unique           @default(uuid())
  order_id          String
  product_id        String
  product_name      String
  product_type      OrderItemType
  product_price     Int              @db.UnsignedInt

  created_at        DateTime         @default(now())
  created_by        String

  updated_at        DateTime         @updatedAt
  updated_by        String

  order             Order            @relation(fields: [order_id], references: [order_id], onDelete: Cascade)

  @@map("order_item")
}

model Transaction {
  id                Int              @id               @default(autoincrement())
  transaction_id    String           @unique  
  request_id        String?          @unique         
  order_id          String
  external_id       String?          @unique
  raw_payload       String?          @db.Text
  paid_amount       Int              @db.UnsignedInt

  gateway           String
  gateway_fee       Int?             @db.UnsignedInt
  gateway_ref       String? 
  channel_code      String?
  
  payment_method    String
  normalized_method NormalizedMethod
  failure_reason    String?          @db.Text
  status            TransactionStatus
  
  paid_at           DateTime?
  expired_at        DateTime?

  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  
  created_by        String?
  updated_by        String?

  order             Order            @relation(fields: [order_id], references: [order_id], onDelete: Cascade)

  @@map("transaction")
}

model PaymentGateway {
  id                Int             @id               @default(autoincrement())
  gateway_id        String          @unique           @default(uuid())
  name              String   
  is_active         Boolean         @default(true)
  config_json       String?         @db.Text 
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt

  @@map("payment_gateway")
}